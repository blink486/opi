//2021-12-26 KEEP for v1

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:moodclicks/model/polltype.dart';
import 'package:moodclicks/screens/addsrvimages2.dart';
import 'package:moodclicks/screens/addsrvquestions.dart';
import 'package:moodclicks/model/createinitsurvey.dart';

// import 'package:moodclicks/screens/addsrvquestions.dart';

class AddQuestions extends StatefulWidget {
  final String
      srvCreator; //TODO: Maybe not necessary to pass as once logged in your session stays until logg out.
  const AddQuestions({Key? key, required this.srvCreator}) : super(key: key);

  @override
  _AddQuestionsState createState() => _AddQuestionsState();
}

class _AddQuestionsState extends State<AddQuestions> {
  final loggedInUser = FirebaseAuth.instance.currentUser!.uid.toString();

  final loggedInUserEmail = FirebaseAuth.instance.currentUser!.email;

  TextEditingController srvName = new TextEditingController();
  TextEditingController srvDescription = new TextEditingController();
  bool privatePoll = true;

  // static const values = <String>['Flutter', 'Dart', 'Firebase'];
  // String selectedValue = values.first;

  static const pollType = [
    PollType(
        id: 1, name: 'Single Choice', description: 'Only 1 choice can be made'),
    PollType(
        id: 2,
        name: 'Multiple Choice',
        description: '1 or More choices can be selected'),
    PollType(
        id: 3,
        name: 'Continuous',
        description:
            'Continuous Voting allowed e.g. picking score/winner during live sports game'),
  ];

  PollType selectedValue = pollType.first;

  final selectedColor = Colors.pink;
  final unselectedColor = Colors.grey;

  @override
  Widget build(BuildContext context) {
    String emojiHeart = '\u2764';

    // late String createdDocId;

    return Scaffold(
      appBar: AppBar(
        title: Text("3.0 addquestionss .dt "),
        // actions: <Widget>[HomeNav()],
      ),
      body: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text('Account Created User ID:'),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text('User Details:  ' + widget.srvCreator),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text('Enter your first Questions'),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: TextFormField(
                controller: srvName,
                decoration: InputDecoration(hintText: "Enter Survey Name:"),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: TextFormField(
                controller: srvDescription,
                decoration:
                    InputDecoration(hintText: "Enter Survey Description"),
              ),
            ),
            Text('Private Poll?'),
            Text(
                'Case Statement Switch ?? Private (Voting Limited to Contacts )/Public(RED Color - Voting Open to all)'),
            buildSwitch(),
            Divider(
              color: Colors.white,
            ),
            buildRadios(),
            Divider(
              color: Colors.white,
            ),
            TextButton(
              style: TextButton.styleFrom(primary: Colors.red),
              onPressed: () async {
                // Generate a reference to a new location and add some data using push()
                // var newPostRef = Navigator.push;
                String questionsAdded = "N";
                DateTime createDT = DateTime.now();
// Get the unique ID generated by push() by accessing its key
// var postID = newPostRef.toString();
// DEV NOTES: CREATE NEW Survey Class Object - NOt necessarily required for curent program,
// but useful to create this way in furture in final version

                // final mySrv = Survey(
                //     name: srvName.text, description: srvDescription.text);

                // final mySrv = Survey(name: srvName.text, description: srvDescription.text);
                // final mySrv = Survey(srvName.text, srvDescription.text, );
                final mySrv = Survey(
                    srvName.text,
                    srvDescription.text,
                    createDT,
                    selectedValue.id,
                    loggedInUserEmail,
                    null,
                    privatePoll);

                Map<String, dynamic> data = mySrv.toMap();

                // AddQuestions();
                // DocumentReference ref =
                //     FirebaseFirestore.instance.collection("test").doc();
                // String myDocId = ref.id;

                // Map<String, dynamic> data = {
                //   "f00user": loggedInUser,
                //   "f00docid": "myDocId",
                //   // "f01name": srvName.text,
                //   // "f02description": srvDescription.text
                //   // "f03srvId": newPostRef.toString()
                //   "f01name": mySrv.name,
                //   "f02description": mySrv.description,
                //   "f03questionsexist": questionsAdded
                // };

                DocumentReference docRef = await FirebaseFirestore.instance
                    .collection('questions')
                    .add(data);
                print(docRef.id);

                // var firebaseUser =  FirebaseAuth.instance.currentUser;

                FirebaseFirestore.instance
                    .collection("questions")
                    .doc(docRef.id)
                    .set({
                  "f00docid": docRef.id,
                }, SetOptions(merge: true)).then((_) {
                  print("success!");
                });

                print(" ^^ NEW DOC ADDED:  ");

                print(srvDescription.toString());
                print('\u{2764}');
                print(String.fromCharCode(0xdd25));
                print(String.fromCharCode(0xdd25));
                print(
                  mySrv.description,
                );
                // Navigator.push(
                //           context,
                //           MaterialPageRoute(
                //             builder: (BuildContext context) => Logonlanding(
                //               searchstr: user.user!.uid.toString(),
                //               // searchstr: searchstring.text,
                //             ),
                //           ),
                //         );

                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (BuildContext context) => AddSrvImages(
                        description: srvDescription.text,
                        name: srvName.text,
                        surveyId: docRef.id),
                  ),
                );
              },
              child: Text(emojiHeart +
                  " Submit New Survey and ADD Quick Survey Emojis "),
            ),
            SizedBox(
              height: 10,
            ),
            Padding(
              padding: const EdgeInsets.all(14.0),
              child: TextButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (BuildContext context) => AddSrvQuestions(
                        //LINKS to FULL SURVEY MAIN PAGE - Keep as Alternate Route? DELETE as Already have copy of programs
                        description: 'User',
                        name: 'Another',
                      ),
                    ),
                  ); //Go Sample Cards
                  // builder: (BuildContext context) => SignUp()));
                  // print('${smile.name}');
                },
                child: Text(
                  emojiHeart + " Add Questions to Long Survey",
                  style: TextStyle(fontSize: 14),
                ),
                // ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(14.0),
              child: TextButton(
                onPressed: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          // builder: (BuildContext context) => PageViewDemo())); //Go Sample Cards
                          builder: (BuildContext context) => AddSrvQuestions(
                                description: 'User',
                                name: 'Another',
                              )));
                  // print('${smile.name}');
                },
                child: Text(
                  emojiHeart + " Visit Add Question Without Create New Survey",
                  style: TextStyle(fontSize: 14),
                ),
                // ),
              ),
            ),
          ],
        ),
      ),
    );
  }

//   void AddQuestions() {
//     Survey _newsurvey =         Survey(name: srvName.text, description: srvDescription.text);
//     print(srvDescription);
//   }
  Widget buildRadios() => Theme(
        data: Theme.of(context).copyWith(
          unselectedWidgetColor: unselectedColor,
        ),
        child: Column(
          children: pollType.map((pollType) {
            final selected = this.selectedValue == pollType;
            final color = selected ? selectedColor : unselectedColor;
            return RadioListTile<PollType>(
              value: pollType,
              groupValue: selectedValue,
              title: Text(
                pollType.name.toString(),
                style: TextStyle(color: color),
              ),
              subtitle: Text(
                pollType.description.toString(),
                style: TextStyle(color: color),
              ),
              // secondary: OutlinedButton(
              //   onPressed: null,
              //   child: Text('image link here'),
              // ), //Change to Network Image
              secondary: Image.network('https://picsum.photos/250?image=9'),
              activeColor: selectedColor,
              onChanged: (value) => setState(() => this.selectedValue = value!),
            );
          }).toList(),
        ),
      );

  Widget buildSwitch() => Transform.scale(
        scale: 1.2,
        child: Switch.adaptive(
            activeColor: Colors.blueAccent,
            value: privatePoll,
            onChanged: (value) => setState(() {
                  this.privatePoll = value;
                })),
      );
}
